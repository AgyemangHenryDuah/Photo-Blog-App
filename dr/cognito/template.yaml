AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cognito User Pool Backup to DR Region

Parameters:
    Environment:
        Type: String
        Default: dev
    DomainName:
        Type: String
        Default: mscv2group3.link
    SharedLayerArn:
        Type: String
        Description: ARN of shared Lambda layer in DR region
    PrimaryRegion:
        Type: String
        Default: eu-central-1
        Description: Primary region
    PrimaryUserPoolArn:
        Type: String
        Description: Primary region User Pool ARN

Resources:
    # DR Region User Pool (created in backup region)
    DRUserPool:
        Type: AWS::Cognito::UserPool
        Properties:
            UserPoolName: !Sub photo-blog-app-users-dr-${Environment}
            AutoVerifiedAttributes:
                - email
            UsernameAttributes:
                - email
            Schema:
                - Name: email
                  AttributeDataType: String
                  Mutable: true
                  Required: true
                - Name: firstName
                  AttributeDataType: String
                  Mutable: true
                  Required: false
                - Name: lastName
                  AttributeDataType: String
                  Mutable: true
                  Required: false
            AdminCreateUserConfig:
                AllowAdminCreateUserOnly: false

    # DR User Pool Client
    DRUserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            ClientName: !Sub photo-blog-app-client-dr-${Environment}
            UserPoolId: !Ref DRUserPool
            GenerateSecret: false
            ExplicitAuthFlows:
                - ALLOW_USER_SRP_AUTH
                - ALLOW_REFRESH_TOKEN_AUTH
                - ALLOW_USER_PASSWORD_AUTH
                - ALLOW_ADMIN_USER_PASSWORD_AUTH
                - ALLOW_CUSTOM_AUTH
            ReadAttributes:
                - email
                - custom:firstName
                - custom:lastName
            WriteAttributes:
                - email
                - custom:firstName
                - custom:lastName
            PreventUserExistenceErrors: ENABLED

    # Backup Function
    CognitoBackupFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/cognito-backup/
            Handler: index.handler
            Runtime: nodejs20.x
            Timeout: 900  # 15 minutes for large user bases
            MemorySize: 512
            Description: Backup Cognito users to DR region
            Layers:
                - !Ref SharedLayerArn
            Environment:
                Variables:
                    USER_POOL_ARN: !Ref PrimaryUserPoolArn
                    DR_USER_POOL_ID: !GetAtt DRUserPool.Arn
                    BACKUP_TABLE: !Ref CognitoBackupTable
                    PRIMARY_REGION: !Ref PrimaryRegion
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref CognitoBackupTable
                - Statement:
                    - Effect: Allow
                      Action:
                        - cognito-idp:AdminCreateUser
                        - cognito-idp:AdminSetUserPassword
                        - cognito-idp:AdminUpdateUserAttributes
                        - cognito-idp:AdminGetUser
                        - cognito-idp:ListUsers
                      Resource: 
                        - !Ref PrimaryUserPoolArn
                        - !GetAtt DRUserPool.Arn
                        # Allow access to any user pool in any region for this account
                        - !Sub "arn:aws:cognito-idp:*:${AWS::AccountId}:userpool/*"
                - AWSLambdaBasicExecutionRole
            Events:
                DailyBackup:
                    Type: Schedule
                    Properties:
                        Schedule: rate(5 minutes)  # Hourly backup for testing, change to cron(0 2 * * ? *) for daily at 2 AM UTC
                        Description: Periodic Cognito user pool backup
                ManualTrigger:
                    Type: CloudWatchEvent
                    Properties:
                        Pattern:
                            source: ["custom.cognito.backup"]
                            detail-type: ["Manual Backup Trigger"]

    # Backup Status Table (no need for global table here as it's DR-specific)
    CognitoBackupTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: !Sub photo-blog-app-cognito-backup-${Environment}
            BillingMode: PAY_PER_REQUEST
            AttributeDefinitions:
                - AttributeName: sub
                  AttributeType: S
                - AttributeName: email
                  AttributeType: S
            KeySchema:
                - AttributeName: sub
                  KeyType: HASH
            GlobalSecondaryIndexes:
                - IndexName: EmailIndex
                  KeySchema:
                    - AttributeName: email
                      KeyType: HASH
                  Projection:
                    ProjectionType: ALL
            StreamSpecification:
                StreamViewType: NEW_AND_OLD_IMAGES

Outputs:
    DRUserPoolId:
        Description: DR Region Cognito User Pool ID
        Value: !Ref DRUserPool
        Export:
            Name: !Sub ${AWS::StackName}-DRUserPoolId

    DRUserPoolClientId:
        Description: DR Region Cognito User Pool Client ID
        Value: !Ref DRUserPoolClient
        Export:
            Name: !Sub ${AWS::StackName}-DRUserPoolClientId

    BackupStatusTableName:
        Description: Cognito Backup Status Table Name
        Value: !Ref CognitoBackupTable
        Export:
            Name: !Sub ${AWS::StackName}-BackupStatusTableName