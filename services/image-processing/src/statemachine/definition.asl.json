{
    "Comment": "Image Processing Workflow",
    "StartAt": "ExtractMetadata",
    "States": {
        "ExtractMetadata": {
            "Type": "Task",
            "Resource": "${ExtractMetadataFunctionArn}",
            "Next": "SendStartNotification",
            "ResultPath": "$.metadata",
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "NotifyFailure"
                }
            ],
            "TimeoutSeconds": 30
        },
        "SendStartNotification": {
            "Type": "Task",
            "Resource": "${SendStartNotificationFunctionArn}",
            "Next": "ApplyWatermark",
            "ResultPath": "$.startNotificationResult",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 2,
                    "BackoffRate": 2
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "NotifyFailure"
                }
            ],
            "TimeoutSeconds": 30
        },
        "ApplyWatermark": {
            "Type": "Task",
            "Resource": "${ApplyWatermarkFunctionArn}",
            "Next": "UpdateDatabaseStatus",
            "ResultPath": "$.watermarkResult",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 5,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "NotifyFailure",
                    "ResultPath": "$.error"
                }
            ],
            "TimeoutSeconds": 60
        },
        "UpdateDatabaseStatus": {
            "Type": "Task",
            "Resource": "${UpdateDatabaseStatusFunctionArn}",
            "Next": "CleanupOriginal",
            "ResultPath": "$.updateDBResult",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "NotifyFailure"
                }
            ],
            "TimeoutSeconds": 30
        },
        "CleanupOriginal": {
            "Type": "Task",
            "Resource": "${CleanupOriginalFunctionArn}",
            "Next": "SendFinalNotification",
            "ResultPath": "$.cleanupResult",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "NotifyFailure"
                }
            ],
            "TimeoutSeconds": 30
        },
        "SendFinalNotification": {
            "Type": "Task",
            "Resource": "${SendFinalNotificationFunctionArn}",
            "End": true,
            "ResultPath": "$.finalNotificationResult",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 2,
                    "BackoffRate": 2
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "NotifyFailure"
                }
            ],
            "TimeoutSeconds": 30
        },
        "NotifyFailure": {
            "Type": "Task",
            "Resource": "${SendFailEmailFunctionArn}",
            "End": true,
            "Parameters": {
                "body": {
                    "userInfo": {
                        "email.$": "$.metadata.userEmail",
                        "firstname.$": "$.metadata.firstName"
                    },
                    "imageInfo": {
                        "imageId.$": "$.metadata.imageId",
                        "imageName.$": "$.metadata.imageName"
                    },
                    "error.$": "$.error"
                }
            },
            "TimeoutSeconds": 30
        }
    }
}