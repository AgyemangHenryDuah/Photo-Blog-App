{
    "Comment": "Image Processing Workflow (Basic Version)",
    "StartAt": "ProcessImage",
    "States": {
        "ProcessImage": {
            "Type": "Task",
            "Resource": "arn:aws:states:::sqs:receiveMessage",
            "Parameters": {
                "QueueUrl": "${ImageProcessingQueue}",
                "MaxNumberOfMessages": 1,
                "WaitTimeSeconds": 20
            },
            "Next": "ExtractMetadata",
            "ResultSelector": {
                "body.$": "States.StringToJson($.Messages[0].Body)"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 5,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ]
        },
        "ExtractMetadata": {
            "Type": "Task",
            "Resource": "${ExtractMetadataArn}",
            "Next": "SendStartNotification",
            "ResultPath": "$.body",
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ]
        },
        "SendStartNotification": {
            "Type": "Task",
            "Resource": "${SendStartNotificationArn}",
            "Next": "ApplyWatermark",
            "ResultPath": "$.body",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 2,
                    "BackoffRate": 2
                }
            ]
        },
        "ApplyWatermark": {
            "Type": "Task",
            "Resource": "${ApplyWatermarkArn}",
            "Next": "UpdateDatabaseStatus",
            "ResultPath": "$.body",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 5,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "NotifyFailure",
                    "ResultPath": "$.error"
                }
            ]
        },
        "UpdateDatabaseStatus": {
            "Type": "Task",
            "Resource": "${UpdateDatabaseStatusArn}",
            "Next": "CleanupOriginal",
            "ResultPath": "$.body",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ]
        },
        "CleanupOriginal": {
            "Type": "Task",
            "Resource": "${CleanupOriginalArn}",
            "Next": "SendFinalNotification",
            "ResultPath": "$.body",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ]
        },
        "SendFinalNotification": {
            "Type": "Task",
            "Resource": "${SendFinalNotificationArn}",
            "End": true,
            "ResultPath": "$.body",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 2,
                    "BackoffRate": 2
                }
            ]
        },
        "NotifyFailure": {
            "Type": "Task",
            "Resource": "${SendFailEmailArn}",
            "Parameters": {
                "body": {
                    "userInfo": {
                        "email.$": "$.body.userEmail",
                        "firstname.$": "$.body.firstName"
                    },
                    "imageInfo": {
                        "imageId.$": "$.body.imageId",
                        "imageName.$": "$.body.imageName"
                    }
                }
            },
            "End": true
        }
    }
}