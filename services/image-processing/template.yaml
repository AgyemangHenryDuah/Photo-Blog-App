AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Image Processing Workflow with Step Functions and Lambda Functions

Parameters:
  Environment:
    Type: String
  StagingBucketName:
    Type: String
  ProcessedBucketName:
    Type: String
  SharedLayerArn:
    Type: String


Resources:
  
  TriggerStepFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/functions/triggerStepFunction.handler
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref ImageProcessingStateMachine
      Events:
        SQSTrigger:
          Type: S3
          Properties:
            Bucket: !Ref StagingBucketName
            Events: s3:ObjectCreated:*
  
  ImageProcessingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn
      DefinitionUri: src/statemachine/definition.asl.json
      DefinitionSubstitutions:
        ExtractMetadataFunctionArn: !GetAtt ExtractMetadataFunction.Arn
        SendStartNotificationFunctionArn: !GetAtt SendStartNotificationFunction.Arn
        ApplyWatermarkFunctionArn: !GetAtt ApplyWatermarkFunction.Arn
        UpdateDatabaseStatusFunctionArn: !GetAtt UpdateDatabaseStatusFunction.Arn
        CleanupOriginalFunctionArn: !GetAtt CleanupOriginalFunction.Arn
        SendFinalNotificationFunctionArn: !GetAtt SendFinalNotificationFunction.Arn
        SendFailEmailFunctionArn: !GetAtt SendFailEmailFunction.Arn
      Tracing:
        Enabled: true
  
  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ExtractMetadataFunction.Arn
                  - !GetAtt UpdateDatabaseStatusFunction.Arn
                  - !GetAtt ApplyWatermarkFunction.Arn
                  - !GetAtt CleanupOriginalFunction.Arn
                  - !GetAtt SendStartNotificationFunction.Arn
                  - !GetAtt SendFailEmailFunction.Arn
                  - !GetAtt SendFinalNotificationFunction.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${StagingBucketName}/*
                  - !Sub arn:aws:s3:::${ProcessedBucketName}/*
                    
  
  ExtractMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/extract-metadata.handler
      CodeUri: ./
      Layers:
        - !Ref SharedLayerArn
      Description: Makes DB queries to extract all needed metadata for the image processing workflow
      Environment:
        Variables:
          PHOTOS_TABLE: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/photos-table}}'
          USERS_TABLE: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/users-table}}'
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/photos-table}}'
        - DynamoDBReadPolicy:
            TableName: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/users-table}}'

  UpdateDatabaseStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/update-metadata.handler
      CodeUri: ./
      Layers:
        - !Ref SharedLayerArn
      Description: Makes DB writings to update image processing status
      Environment:
        Variables:
          PHOTOS_TABLE: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/photos-table}}'
          USERS_TABLE: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/users-table}}'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/photos-table}}'
        - DynamoDBCrudPolicy:
            TableName: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/users-table}}'

  ApplyWatermarkFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/apply-watermark.handler
      CodeUri: ./
      Layers:
        - !Ref SharedLayerArn
      Description: Applies watermark to images
      Timeout: 60
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref StagingBucketName
        - S3WritePolicy:
            BucketName: !Ref ProcessedBucketName
      Environment:
        Variables:
          STAGING_BUCKET: !Ref StagingBucketName
          PROCESSED_BUCKET: !Ref ProcessedBucketName

  CleanupOriginalFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/delete-original-image.handler
      CodeUri: ./
      Layers:
        - !Ref SharedLayerArn
      Description: Deletes original image from staging bucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref StagingBucketName
      Environment:
        Variables:
          STAGING_BUCKET: !Ref StagingBucketName

  SendStartNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/send-start-email.handler
      CodeUri: ./
      Layers:
        - !Ref SharedLayerArn
      Description: Notify user when processing starts
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"
      
  SendFailEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/send-failed-email.handler
      CodeUri: ./
      Layers:
        - !Ref SharedLayerArn
      Description: Notify user on processing failure
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"
      
  SendFinalNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/send-success-email.handler
      CodeUri: ./
      Layers:
        - !Ref SharedLayerArn
      Description: Notify user on processing success
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"  