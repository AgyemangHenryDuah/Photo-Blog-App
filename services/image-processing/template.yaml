AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Image Processing Workflow with Step Functions and Lambda Functions

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Deployment environment (dev, prod)
  ProcessedBucketName:
    Type: String
    Description: Name of the S3 bucket for processed images
  SharedLayerArn:
    Type: String
    Description: ARN of the shared Lambda layer

Globals:
  Function:
    Runtime: nodejs20.x

Resources:
  # S3 Bucket for staging image uploads
  StagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub photo-blog-staging-${AWS::StackName}-${AWS::Region}
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldFiles
            Status: Enabled
            ExpirationInDays: 1
  
  # Lambda function to trigger the Step Function on S3 uploads
  UploadTriggerStepFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/functions/triggerStepFunction.handler
      Environment:
        Variables:
          STATE_MACHINE_ARN: !GetAtt ImageProcessingStateMachine.Arn
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: states:StartExecution
              Resource: !GetAtt ImageProcessingStateMachine.Arn
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref StagingBucket
            Events: s3:ObjectCreated:*
  
  # State Machine for image processing workflow
  ImageProcessingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      DefinitionUri: src/statemachine/definition.asl.json
      DefinitionSubstitutions:
        ExtractMetadataFunctionArn: !GetAtt ExtractMetadataFunction.Arn
        SendStartNotificationFunctionArn: !GetAtt SendStartNotificationFunction.Arn
        ApplyWatermarkFunctionArn: !GetAtt ApplyWatermarkFunction.Arn
        UpdateDatabaseStatusFunctionArn: !GetAtt UpdateDatabaseStatusFunction.Arn
        CleanupOriginalFunctionArn: !GetAtt CleanupOriginalFunction.Arn
        SendFinalNotificationFunctionArn: !GetAtt SendFinalNotificationFunction.Arn
        SendFailEmailFunctionArn: !GetAtt SendFailEmailFunction.Arn
      Role: !GetAtt StepFunctionExecutionRole.Arn
      Tracing:
        Enabled: true
  
  # IAM Role for Step Function execution
  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
        - PolicyName: StepFunctionS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::photo-blog-staging-${AWS::StackName}-${AWS::Region}/*
                  - !Sub arn:aws:s3:::${ProcessedBucketName}/*
  
  # Lambda function to extract metadata
  ExtractMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/extract-metadata.handler
      CodeUri: ./
      Layers:
        - !Ref SharedLayerArn
      Description: Makes DB queries to extract all needed metadata for the image processing workflow
      Environment:
        Variables:
          PHOTOS_TABLE: !Ref PhotosTable
          USERS_TABLE: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/users-table}}'
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PhotosTable
        - DynamoDBReadPolicy:
            TableName: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/users-table}}'

  # Lambda function to update database status
  UpdateDatabaseStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/update-metadata.handler
      CodeUri: ./
      Layers:
        - !Ref SharedLayerArn
      Description: Makes DB writings to update image processing status
      Environment:
        Variables:
          PHOTOS_TABLE: !Ref PhotosTable
          USERS_TABLE: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/users-table}}'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotosTable
        - DynamoDBCrudPolicy:
            TableName: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/users-table}}'

  # Lambda function to apply watermark to images
  ApplyWatermarkFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/apply-watermark.handler
      CodeUri: ./
      Layers:
        - !Ref SharedLayerArn
      Description: Applies watermark to images
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          STAGING_BUCKET: !Sub photo-blog-staging-${AWS::StackName}-${AWS::Region}
          PROCESSED_BUCKET: !Ref ProcessedBucketName
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub photo-blog-staging-${AWS::StackName}-${AWS::Region}
        - S3WritePolicy:
            BucketName: !Ref ProcessedBucketName

  # Lambda function to clean up original images
  CleanupOriginalFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/delete-original-image.handler
      CodeUri: ./
      Layers:
        - !Ref SharedLayerArn
      Description: Deletes original image from staging bucket
      Environment:
        Variables:
          STAGING_BUCKET: !Sub photo-blog-staging-${AWS::StackName}-${AWS::Region}
      Policies:
        - S3CrudPolicy:
            BucketName: !Sub photo-blog-staging-${AWS::StackName}-${AWS::Region}

  # Lambda function to send start notification
  SendStartNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/send-start-email.handler
      CodeUri: ./
      Layers:
        - !Ref SharedLayerArn
      Description: Notify user when processing starts
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"
      
  # Lambda function to send failure notification
  SendFailEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/send-failed-email.handler
      CodeUri: ./
      Layers:
        - !Ref SharedLayerArn
      Description: Notify user on processing failure
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"
      
  # Lambda function to send success notification
  SendFinalNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/send-success-email.handler
      CodeUri: ./
      Layers:
        - !Ref SharedLayerArn
      Description: Notify user on processing success
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"  
              
  # DynamoDB table for photos metadata
  PhotosTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub photo-blog-app-photos-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: photoId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: photoId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: PhotosByStatus
          KeySchema:
            - AttributeName: photoId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

Outputs:
  ImageProcessingStateMachineArn:
    Description: ARN of the image processing state machine
    Value: !GetAtt ImageProcessingStateMachine.Arn
    Export:
      Name: !Sub ${AWS::StackName}-StateMachineArn

  PhotosTableName:
    Description: DynamoDB table for photo metadata
    Value: !Ref PhotosTable
    Export:
      Name: !Sub ${AWS::StackName}-PhotosTable

  StagingBucketName:
    Description: S3 bucket for image staging
    Value: !Ref StagingBucket
    Export:
      Name: !Sub ${AWS::StackName}-StagingBucket