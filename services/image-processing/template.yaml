AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Photo Blog - Image Processing Service

Parameters:
  Environment:
    Type: String
    Default: dev
  StagingBucketName:
    Type: String
  ProcessedBucketName:
    Type: String
  SharedLayerArn:
    Type: String


Resources:
  ImageProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub photo-blog-image-processing-${Environment}
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ImageProcessingDLQ.Arn
        maxReceiveCount: 3


  ImageProcessingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub photo-blog-image-processing-dlq-${Environment}
      MessageRetentionPeriod: 1209600  # 14 days


  ExtractMetaDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs22.x
      MemorySize: 128
      Handler: extract-metadata.handler
      CodeUri: src/functions/
      Description: Makes DB queries to extract all needed metadata for the image processing workflow
  

  UpdateMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs22.x
      MemorySize: 128
      Timeout: 30
      Handler: update-metadata.handler
      CodeUri: src/functions/
      Description: Makes DB writings to update image processing status
    

  ApplyWatermarkFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: apply-watermark.handler
      CodeUri: src/functions/
      Description: Applies watermark to images
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref StagingBucketName
        - S3WritePolicy:
            BucketName: !Ref ProcessedBucketName
      Environment:
        Variables:
          STAGING_BUCKET: !Ref StagingBucketName
          PROCESSED_BUCKET: !Ref ProcessedBucketName

    
  DeleteOriginalImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: delete-original-image.handler
      CodeUri: src/functions/
      Description: Deletes original image from staging bucket
      Policies:
        - AmazonS3FullAccess
        - AmazonSESFullAccess
      Environment:
        Variables:
          STAGING_BUCKET: !Ref StagingBucketName

  
  SendStartEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: send-start-email.handler
      CodeUri: src/functions/
      Description: Notify user when processing starts
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"

  SendFailedEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: send-failed-email.handler
      CodeUri: src/functions/
      Description: Notify user on processing failure
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"

  SendSuccessEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: send-success-email.handler
      CodeUri: src/functions/
      Description: Notify user on processing success
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"

  
  ImageProcessingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: src/statemachine/definition.asl.json
      DefinitionSubstitutions:
        ExtractMetadataFunctionArn: !GetAtt ExtractMetaDataFunction.Arn
        UpdateMetadataFunctionArn: !GetAtt UpdateMetadataFunction.Arn
        ApplyWatermarkFunctionArn: !GetAtt ApplyWatermarkFunction.Arn
        DeleteOriginalImageFunctionArn: !GetAtt DeleteOriginalImageFunction.Arn
        SendStartEmailFunctionArn: !GetAtt SendStartEmailFunction.Arn
        SendFailedEmailFunctionArn: !GetAtt SendFailedEmailFunction.Arn
        SendSuccessEmailFunctionArn: !GetAtt SendSuccessEmailFunction.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref ExtractMetaDataFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref UpdateMetadataFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ApplyWatermarkFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref DeleteOriginalImageFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref SendStartEmailFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref SendFailedEmailFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref SendSuccessEmailFunction
        - SQSPollerPolicy:
            QueueName: !Ref ImageProcessingQueue

  ProcessImageRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.sqs
        detail-type:
          - AWS API Call Via CloudTrail
        detail:
          eventSource:
            - sqs.amazonaws.com
          eventName:
            - ReceiveMessage
          resources:
            - !GetAtt ImageProcessingQueue.Arn
      Targets:
        - Arn: !Ref ImageProcessingStateMachine
          Id: "TriggerImageProcessing"
          RoleArn: !GetAtt EventBridgeRole.Arn

  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: InvokeStepFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Ref ImageProcessingStateMachine
Outputs:
 