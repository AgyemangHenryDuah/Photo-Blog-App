AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Photo Blog - Image Processing Service

Parameters:
  Environment:
    Type: String
    Default: dev
  ProcessedBucketName:
    Type: String
  SharedLayerArn:
    Type: String

Globals:
  Function:
    Runtime: nodejs20.x

Resources:
  # SQS Queue for image processing
  ImageProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub photo-blog-app-image-processing-${Environment}
      VisibilityTimeout: 300  # 5 minutes
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ImageProcessingDLQ.Arn
        maxReceiveCount: 3

  # Dead Letter Queue for failed processing
  ImageProcessingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub photo-blog-app-image-processing-dlq-${Environment}
      MessageRetentionPeriod: 1209600  # 14 days

  # Image Processor Function
  ImageProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/image-processor/
      Handler: index.handler
      Description: Processes uploaded images
      Timeout: 180
      MemorySize: 1024
      Layers:
        - !Ref SharedLayerArn  # Use the parameter directly
        - !Ref ImageProcessingLayer  # Layer for image processing libraries
      Environment:
        Variables:
          STAGING_BUCKET: !Ref StagingBucket
          PROCESSED_BUCKET: !Ref ProcessedBucketName
          PHOTOS_TABLE: !Ref PhotosTable
          PROCESSING_QUEUE: !Ref ImageProcessingQueue
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref StagingBucket
        - S3CrudPolicy:
            BucketName: !Ref ProcessedBucketName
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotosTable
        - SQSPollerPolicy:
            QueueName: !GetAtt ImageProcessingQueue.QueueName
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ImageProcessingQueue.Arn
            BatchSize: 1

  # Upload Trigger Function
  UploadTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/upload-trigger/
      Handler: index.handler
      Description: Triggers image processing when new image is uploaded
      Layers:
        - !Ref SharedLayerArn  # Use the parameter directly
      Environment:
        Variables:
          PROCESSING_QUEUE: !Ref ImageProcessingQueue
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ImageProcessingQueue.QueueName
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref StagingBucket
            Events: s3:ObjectCreated:*

  # Processing Retry Function
  ProcessingRetryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/retry-processor/
      Handler: index.handler
      Description: Retries failed image processing tasks
      Layers:
        - !Ref SharedLayerArn  # Use the parameter directly
      Environment:
        Variables:
          PROCESSING_QUEUE: !Ref ImageProcessingQueue
          DLQ_URL: !Ref ImageProcessingDLQ
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ImageProcessingQueue.QueueName
        - SQSPollerPolicy:
            QueueName: !GetAtt ImageProcessingDLQ.QueueName
      Events:
        ScheduledRetry:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
            Description: Retry failed image processing tasks

  # Photos metadata table
  PhotosTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub photo-blog-app-photos-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: photoId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: photoId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: PhotosByStatus
          KeySchema:
            - AttributeName: photoId
              KeyType: HASH
          Projection:
            ProjectionType: ALL


  # DR Backup bucket in secondary region
  StagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub photo-blog-app-staging-${Environment}-${AWS::AccountId}
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldFiles
            Status: Enabled
            ExpirationInDays: 1

  # Set up staging bucket trigger permissions
  StagingBucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UploadTriggerFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub 'arn:aws:s3:::${StagingBucket}'

Outputs:
  PhotosTableName:
    Description: DynamoDB table for photo metadata
    Value: !Ref PhotosTable
    Export:
      Name: !Sub ${AWS::StackName}-PhotosTable
      
  ImageProcessingQueueUrl:
    Description: SQS queue for image processing
    Value: !Ref ImageProcessingQueue
    Export:
      Name: !Sub ${AWS::StackName}-ProcessingQueue

  StagingBucketName:
    Description: S3 bucket for image staging
    Value: !Ref StagingBucket
    Export:
      Name: !Sub ${AWS::StackName}-StagingBucket