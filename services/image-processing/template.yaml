AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Photo Blog - Image Processing Service

Parameters:
  Environment:
    Type: String
    Default: dev
  StagingBucketName:
    Type: String
  ProcessedBucketName:
    Type: String
  SharedLayerArn:
    Type: String

Resources:
  
  # Photos metadata table
  PhotosTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub photo-blog-photos-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: photoId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: photoId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: PhotosByStatus
          KeySchema:
            - AttributeName: photoId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      # DR Replication to backup region
      GlobalTableConfiguration:
        ReplicationGroup:
          - Region: !Ref AWS::Region
          - Region: !Sub '{{resolve:ssm:/photo-blog/${Environment}/dr-region}}'
  
  # SQS Queue for image processing
  ImageProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub photo-blog-image-processing-${Environment}
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ImageProcessingDLQ.Arn
        maxReceiveCount: 3

  # Dead Letter Queue for failed processing
  ImageProcessingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub photo-blog-image-processing-dlq-${Environment}
      MessageRetentionPeriod: 1209600  # 14 days
  
  # Lambda function to Extract Metadata for image processing
  ExtractMetaDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: extract-metadata.handler
      CodeUri: src/functions/
      Description: Makes DB queries to extract all needed metadata for the image processing workflow
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PhotosTable
        - SQSPollerPolicy:
            QueueName: !Ref ImageProcessingQueue
  
  # Lambda function to update metadata after successful image processing
  UpdateMetadataFunction:
    Type: AWS::Severless::Function
    Properties:
    Handler: update-metadata.handler
    CodeUri: src/functions/
    Description: Makes DB writings to update image processing status
    Policies:
      - DynamoDBWritePolicy:
          TableName: !Ref PhotosTable
  

  ApplyWatermarkFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: apply-watermark.handler
      CodeUri: src/functions/
      Description: Applies water mark to images
      Policies:
          - S3ReadPolicy:
              BucketName: !Ref StagingBucketName
          - S3WritePolicy:
              BucketName: !Ref ProcessedBucketName
  

  DeleteOriginalImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dlete-original-image.handler
      CodeUri: src/functions/
      Description: Cleans up Original images from staging bucket
      Policies:
        - S3DeletePolicy:
            BucketName: !Ref StagingBucketName

  
  SendStartEmailFunction:
    pe: AWS::Serverless::Function
    Properties:
      Handler: send-start-email.handler
      CodeUri: src/functions/
      Description: Sends email to user when image processing starts
      Policies:
        - SESSendEmailPolicy:
            IdentityName: !Sub "notify@photo-blog-${Environment}.com"
  

  SendFailedEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: send-failed-email.handler
      CodeUri: src/functions/
      Description: Sends email to user when image processing fails
      Policies:
        - SESSendEmailPolicy:
            IdentityName: !Sub "notify@photo-blog-${Environment}.com"
    
  SendSuccessEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: send-success-email.handler
      CodeUri: src/functions/
      Description: Sends email to user when image processing succeeds
      Policies:
        - SESSendEmailPolicy:
            IdentityName: !Sub "notify@photo-blog-${Environment}.com"
    

  
  # Step Functions State Machine
  ImageProcessingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: src/statemachine/definition.asl.json
      DefinitionSubstitutions:
        ExtractMetadataFunctionArn: !GetAtt ExtractMetaDataFunction.Arn
        UpdateMetadataFunctionArn: !GetAtt UpdateMetadataFunction.Arn
        ApplyWatermarkFunctionArn: !GetAtt ApplyWatermarkFunction.Arn
        DeleteOriginalImageFunctionArn: !GetAtt DeleteOriginalImageFunction.Arn
        SendStartEmailFunctionArn: !GetAtt SendStartEmailFunction.Arn
        SendFailedEmailFunctionArn: !GetAtt SendFailedEmailFunction.Arn
        SendSuccessEmailFunctionArn: !GetAtt SendSuccessEmailFunction.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref ExtractMetaDataFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref UpdateMetadataFunction
        - SQSPollerPolicy:
            QueueName: !Ref ImageProcessingQueue
  

  #EventBridge Rile to Trigger Step Function on SQS
  ProcessImageRule:
    Type: AWS:Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.sqs
        detail-type:
          - AWS API Call Via CLoudTrail
        detail:
          eventSource:
            - sqs.amazonaws.com
          eventName:
            - RecieveMessage
          resources:
            - !GetAtt ImageProcessingQueue.Arn
      Targets:
        - Arn: !Ref ImageProcessingStateMachine
          Id: "TriggerImageProcessing"
          RoleArn: !GetAtt EventBridgeRole.Arn
  
  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: InvokeStepFunctionPolicy
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Ref ImageProcessingStateMachine
Outputs:
  StagingBucketName:
    Value: !Ref StagingBucketName
  ProcessedBucketName:
    Value: !Ref ProcessedBucketName
  PhotosTableName:
    Value: !Ref PhotosTable
  PhotosTableArn:
    Value: !GetAtt PhotosTable.Arn
  SharedLayerArn:
    Value: !Ref SharedLayerArn
  ImageProcessingQueue:
    Value: !Ref ImageProcessingQueue
  ImageProcessingDLQ:
    Value: !Ref ImageProcessingDLQ
  ImageProcessingStateMachine:
    Value: !Ref ImageProcessingStateMachine
  ImageProcessingStateMachineArn:
    Value: !GetAtt ImageProcessingStateMachine.Arn