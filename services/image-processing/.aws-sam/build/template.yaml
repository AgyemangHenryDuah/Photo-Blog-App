AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Photo Blog - Image Processing Service
Parameters:
  Environment:
    Type: String
    Default: dev
  StagingBucketName:
    Type: String
  ProcessedBucketName:
    Type: String
  SharedLayerArn:
    Type: String
  FromEmailAddress:
    Type: String
    Description: Email address to send notifications from
    Default: noreply@example.com
Globals:
  Function:
    Timeout: 30
    Runtime: nodejs22.x
    MemorySize: 256
Resources:
  DLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Sub: PhotoBlog-${Environment}-DLQ-Messages
      AlarmDescription: Alarm if DLQ receives any messages
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
      - Name: QueueName
        Value:
          Fn::GetAtt:
          - ImageProcessingDLQ
          - QueueName
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
  ImageProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Sub: photo-blog-image-processing-${Environment}
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
          - ImageProcessingDLQ
          - Arn
        maxReceiveCount: 3
  ImageProcessingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Sub: photo-blog-image-processing-dlq-${Environment}
      MessageRetentionPeriod: 1209600
  ExtractMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: extract-metadata.handler
      CodeUri: ExtractMetadataFunction
      Description: Extracts metadata from images
      Layers:
      - Ref: SharedLayerArn
      Environment:
        Variables:
          PHOTOS_TABLE:
            Fn::Sub: '{{resolve:ssm:/photo-blog/${Environment}/photos-table}}'
          USERS_TABLE:
            Fn::Sub: '{{resolve:ssm:/photo-blog/${Environment}/users-table}}'
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Fn::Sub: '{{resolve:ssm:/photo-blog/${Environment}/photos-table}}'
      - DynamoDBReadPolicy:
          TableName:
            Fn::Sub: '{{resolve:ssm:/photo-blog/${Environment}/users-table}}'
    Metadata:
      SamResourceId: ExtractMetadataFunction
  UpdateDatabaseStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update-metadata.handler
      CodeUri: UpdateDatabaseStatusFunction
      Description: Makes DB writings to update image processing status
      Layers:
      - Ref: SharedLayerArn
      Environment:
        Variables:
          PHOTOS_TABLE:
            Fn::Sub: '{{resolve:ssm:/photo-blog/${Environment}/photos-table}}'
          USERS_TABLE:
            Fn::Sub: '{{resolve:ssm:/photo-blog/${Environment}/users-table}}'
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Fn::Sub: '{{resolve:ssm:/photo-blog/${Environment}/photos-table}}'
    Metadata:
      SamResourceId: UpdateDatabaseStatusFunction
  ApplyWatermarkFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: apply-watermark.handler
      CodeUri: ApplyWatermarkFunction
      Description: Applies watermark to images
      Layers:
      - Ref: SharedLayerArn
      Policies:
      - S3ReadPolicy:
          BucketName:
            Ref: StagingBucketName
      - S3WritePolicy:
          BucketName:
            Ref: ProcessedBucketName
      Environment:
        Variables:
          STAGING_BUCKET:
            Ref: StagingBucketName
          PROCESSED_BUCKET:
            Ref: ProcessedBucketName
    Metadata:
      SamResourceId: ApplyWatermarkFunction
  CleanupOriginalFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: delete-original-image.handler
      CodeUri: CleanupOriginalFunction
      Description: Deletes original image from staging bucket
      Layers:
      - Ref: SharedLayerArn
      Policies:
      - S3CrudPolicy:
          BucketName:
            Ref: StagingBucketName
      Environment:
        Variables:
          STAGING_BUCKET:
            Ref: StagingBucketName
    Metadata:
      SamResourceId: CleanupOriginalFunction
  SendStartNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: send-start-email.handler
      CodeUri: SendStartNotificationFunction
      Description: Notify user when processing starts
      Layers:
      - Ref: SharedLayerArn
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ses:SendEmail
          - ses:SendRawEmail
          Resource: '*'
          Condition:
            StringEquals:
              ses:FromAddress:
                Ref: FromEmailAddress
      Environment:
        Variables:
          FROM_EMAIL:
            Ref: FromEmailAddress
    Metadata:
      SamResourceId: SendStartNotificationFunction
  SendFailEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: send-failed-email.handler
      CodeUri: SendFailEmailFunction
      Description: Notify user on processing failure
      Layers:
      - Ref: SharedLayerArn
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ses:SendEmail
          - ses:SendRawEmail
          Resource: '*'
          Condition:
            StringEquals:
              ses:FromAddress:
                Ref: FromEmailAddress
      Environment:
        Variables:
          FROM_EMAIL:
            Ref: FromEmailAddress
    Metadata:
      SamResourceId: SendFailEmailFunction
  SendFinalNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: send-success-email.handler
      CodeUri: SendFinalNotificationFunction
      Description: Notify user on processing success
      Layers:
      - Ref: SharedLayerArn
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ses:SendEmail
          - ses:SendRawEmail
          Resource: '*'
          Condition:
            StringEquals:
              ses:FromAddress:
                Ref: FromEmailAddress
      Environment:
        Variables:
          FROM_EMAIL:
            Ref: FromEmailAddress
    Metadata:
      SamResourceId: SendFinalNotificationFunction
  ImageProcessingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ..\..\src\statemachine\definition.asl.json
      DefinitionSubstitutions:
        ExtractMetadataFunctionArn:
          Fn::GetAtt:
          - ExtractMetadataFunction
          - Arn
        SendStartNotificationFunctionArn:
          Fn::GetAtt:
          - SendStartNotificationFunction
          - Arn
        ApplyWatermarkFunctionArn:
          Fn::GetAtt:
          - ApplyWatermarkFunction
          - Arn
        UpdateDatabaseStatusFunctionArn:
          Fn::GetAtt:
          - UpdateDatabaseStatusFunction
          - Arn
        CleanupOriginalFunctionArn:
          Fn::GetAtt:
          - CleanupOriginalFunction
          - Arn
        SendFinalNotificationFunctionArn:
          Fn::GetAtt:
          - SendFinalNotificationFunction
          - Arn
        SendFailEmailFunctionArn:
          Fn::GetAtt:
          - SendFailEmailFunction
          - Arn
      Policies:
      - LambdaInvokePolicy:
          FunctionName:
            Ref: ExtractMetadataFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: UpdateDatabaseStatusFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: ApplyWatermarkFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: CleanupOriginalFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: SendStartNotificationFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: SendFailEmailFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: SendFinalNotificationFunction
      - SQSPollerPolicy:
          QueueName:
            Ref: ImageProcessingQueue
      Tracing:
        Enabled: true
  ProcessImageRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
        - aws.sqs
        detail-type:
        - AWS API Call Via CloudTrail
        detail:
          eventSource:
          - sqs.amazonaws.com
          eventName:
          - ReceiveMessage
          resources:
          - Fn::GetAtt:
            - ImageProcessingQueue
            - Arn
      Targets:
      - Arn:
          Ref: ImageProcessingStateMachine
        Id: TriggerImageProcessing
        RoleArn:
          Fn::GetAtt:
          - EventBridgeRole
          - Arn
  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: InvokeStepFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - states:StartExecution
            Resource:
            - Ref: ImageProcessingStateMachine
Outputs:
  ImageProcessingStateMachineArn:
    Description: ARN of the Image Processing State Machine
    Value:
      Ref: ImageProcessingStateMachine
  ImageProcessingQueueUrl:
    Description: URL of the Image Processing Queue
    Value:
      Ref: ImageProcessingQueue
  ImageProcessingDLQUrl:
    Description: URL of the Image Processing Dead Letter Queue
    Value:
      Ref: ImageProcessingDLQ
