AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Photo Blog - Photo Management Service

Parameters:
  Environment:
    Type: String
    Default: dev
  ProcessedBucketName:
    Type: String
  SharedLayerArn:
    Type: String
  BackupRegion:
    Type: String
    Default: eu-west-1
    Description: DR backup region

Globals:
  Function:
    Runtime: nodejs20.x

Resources:
  # API Gateway
  PhotosApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/user-pool-arn}}'
        AddDefaultAuthorizerToCorsPreflight: false

  # Get user photos function
  GetPhotosFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get-photos/
      Handler: index.handler
      Description: Retrieves user photos
      Layers:
        - !Ref SharedLayerArn
      Environment:
        Variables:
          PHOTOS_TABLE: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/photos-table}}'
          PROCESSED_BUCKET: !Ref ProcessedBucketName
      Policies:
        - DynamoDBReadPolicy:
            TableName: '*'
        - S3ReadPolicy:
            BucketName: !Ref ProcessedBucketName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PhotosApi
            Path: /photos
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  # Upload photo function (generates presigned URL)
  GetUploadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get-upload-url/
      Handler: index.handler
      Description: Generates presigned URL for direct S3 upload
      Layers:
        - !Ref SharedLayerArn
      Environment:
        Variables:
          PHOTOS_TABLE: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/photos-table}}'
          STAGING_BUCKET: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/staging-bucket}}'
      Policies:
        - S3WritePolicy:
            BucketName: '*'
        - DynamoDBCrudPolicy:
            TableName: '*'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PhotosApi
            Path: /photos/upload-url
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  # Delete photo function (moves to recycle bin)
  DeletePhotoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/delete-photo/
      Handler: index.handler
      Description: Moves photo to recycle bin
      Layers:
        - !Ref SharedLayerArn
      Environment:
        Variables:
          PHOTOS_TABLE: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/photos-table}}'
          PROCESSED_BUCKET: !Ref ProcessedBucketName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: '*'
        - S3CrudPolicy:
            BucketName: !Ref ProcessedBucketName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PhotosApi
            Path: /photos/{photoId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  # Restore photo from recycle bin
  RestorePhotoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/restore-photo/
      Handler: index.handler
      Description: Restores photo from recycle bin
      Layers:
        - !Ref SharedLayerArn
      Environment:
        Variables:
          PHOTOS_TABLE: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/photos-table}}'
          PROCESSED_BUCKET: !Ref ProcessedBucketName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: '*'
        - S3CrudPolicy:
            BucketName: !Ref ProcessedBucketName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PhotosApi
            Path: /photos/{photoId}/restore
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  # Get recycled photos
  GetRecycledPhotosFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get-recycled/
      Handler: index.handler
      Description: Retrieves user's recycled photos
      Layers:
        - !Ref SharedLayerArn
      Environment:
        Variables:
          PHOTOS_TABLE: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/photos-table}}'
          PROCESSED_BUCKET: !Ref ProcessedBucketName
      Policies:
        - DynamoDBReadPolicy:
            TableName: '*'
        - S3ReadPolicy:
            BucketName: !Ref ProcessedBucketName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PhotosApi
            Path: /photos/recycled
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  # Generate shareable link
  GenerateShareLinkFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/generate-share-link/
      Handler: index.handler
      Description: Generates time-bound shareable link for a photo
      Layers:
        - !Ref SharedLayerArn
      Environment:
        Variables:
          PHOTOS_TABLE: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/photos-table}}'
          PROCESSED_BUCKET: !Ref ProcessedBucketName
          SHARE_LINKS_TABLE: !Ref ShareLinksTable
          ENVIRONMENT_NAME: !Ref Environment
          # API_BASE_URL: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/api-endpoint}}' //removed for now. parameter doesn't get created during first deployments
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ShareLinksTable
        - DynamoDBReadPolicy:
            TableName: '*'
        - S3ReadPolicy:
            BucketName: !Ref ProcessedBucketName
        - SSMParameterReadPolicy:
            ParameterName: '*'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PhotosApi
            Path: /photos/{photoId}/share
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  # Get shared photo
  GetSharedPhotoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get-shared-photo/
      Handler: index.handler
      Description: Retrieves a shared photo by share token
      Layers:
        - !Ref SharedLayerArn
      Environment:
        Variables:
          PHOTOS_TABLE: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/photos-table}}'
          # API_BASE_URL: !Sub '{{resolve:ssm:/photo-blog-app/${Environment}/api-endpoint}}' //removed for now. parameter doesn't get created during first deployments
          PROCESSED_BUCKET: !Ref ProcessedBucketName
          SHARE_LINKS_TABLE: !Ref ShareLinksTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ShareLinksTable
        - DynamoDBCrudPolicy:
            TableName: '*'
        - S3ReadPolicy:
            BucketName: !Ref ProcessedBucketName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PhotosApi
            Path: /shared/{shareToken}
            Method: get
            Auth:
              Authorizer: NONE

  # Table for shared links
  ShareLinksTable:
    Type: AWS::DynamoDB::GlobalTable
    Properties:
      TableName: !Sub photo-blog-app-share-links-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: shareToken
          AttributeType: S
      KeySchema:
        - AttributeName: shareToken
          KeyType: HASH
      StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification:
        AttributeName: expiresAt
        Enabled: true
      Replicas:
        - Region: !Ref AWS::Region
        - Region: !Ref BackupRegion

  # Log Groups for Lambda Functions with retention periods
  GetUploadUrlFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetUploadUrlFunction}'
      RetentionInDays: 5

Outputs:
  PhotosApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${PhotosApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name: !Sub ${AWS::StackName}-ApiEndpoint
      
  ShareLinksTableName:
    Description: DynamoDB table for share photo links
    Value: !Ref ShareLinksTable
    Export:
      Name: !Sub ${AWS::StackName}-ShareLinksTable